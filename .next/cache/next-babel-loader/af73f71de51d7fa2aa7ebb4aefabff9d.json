{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar BASE_URL = 'http://localhost:3011/api';\n/* const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\r\nconst randomNumber = (min = 0, max = 1) =>\r\n  Math.floor(Math.random() * (max - min + 1)) + min;\r\nconst simulateNetworkLatency = (min = 30, max = 1500) =>\r\n  delay(randomNumber(min, max)); */\n\nfunction callApi(_x) {\n  return _callApi.apply(this, arguments);\n}\n\nfunction _callApi() {\n  _callApi = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(endpoint) {\n    var options,\n        url,\n        response,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return simulateNetworkLatency();\n\n          case 3:\n            options.headers = {\n              'Content-Type': 'application/json',\n              Accept: 'application/json'\n            };\n            url = BASE_URL + endpoint;\n            _context.next = 7;\n            return fetch(url, options);\n\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return response.json();\n\n          case 10:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _callApi.apply(this, arguments);\n}\n\nvar api = {\n  badges: {\n    list: function list() {\n      return callApi('/badges');\n    },\n    create: function create(badge) {\n      // throw new Error('500: Server error');\n      return callApi(\"/badges\", {\n        method: 'POST',\n        body: _JSON$stringify(badge)\n      });\n    },\n    read: function read(badgeId) {\n      return callApi(\"/badges/\".concat(badgeId));\n    },\n    update: function update(badgeId, updates) {\n      return callApi(\"/badges/\".concat(badgeId), {\n        method: 'PUT',\n        body: _JSON$stringify(updates)\n      });\n    },\n    // Lo hubiera llamado `delete`, pero `delete` es un keyword en JavaScript asi que no es buena idea :P\n    remove: function remove(badgeId) {\n      return callApi(\"/badges/\".concat(badgeId), {\n        method: 'DELETE'\n      });\n    }\n  }\n};\nexport default api;","map":{"version":3,"sources":["C:/Users/lbrito/Dropbox/Desarrollos/Movenu Version 2019/pages/api/api.js"],"names":["BASE_URL","callApi","endpoint","options","simulateNetworkLatency","headers","Accept","url","fetch","response","json","data","api","badges","list","create","badge","method","body","read","badgeId","update","updates","remove"],"mappings":";;;AAAA,IAAMA,QAAQ,GAAG,2BAAjB;AAEA;;;;;;SAMeC,O;;;;;;;2BAAf,iBAAuBC,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiCC,YAAAA,OAAjC,2DAA2C,EAA3C;AAAA;AAAA,mBACQC,sBAAsB,EAD9B;;AAAA;AAGED,YAAAA,OAAO,CAACE,OAAR,GAAkB;AAChB,8BAAgB,kBADA;AAEhBC,cAAAA,MAAM,EAAE;AAFQ,aAAlB;AAKMC,YAAAA,GARR,GAQcP,QAAQ,GAAGE,QARzB;AAAA;AAAA,mBASyBM,KAAK,CAACD,GAAD,EAAMJ,OAAN,CAT9B;;AAAA;AASQM,YAAAA,QATR;AAAA;AAAA,mBAUqBA,QAAQ,CAACC,IAAT,EAVrB;;AAAA;AAUQC,YAAAA,IAVR;AAAA,6CAYSA,IAZT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,IAAMC,GAAG,GAAG;AACVC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IADM,kBACC;AACL,aAAOb,OAAO,CAAC,SAAD,CAAd;AACD,KAHK;AAINc,IAAAA,MAJM,kBAICC,KAJD,EAIQ;AACZ;AACA,aAAOf,OAAO,YAAY;AACxBgB,QAAAA,MAAM,EAAE,MADgB;AAExBC,QAAAA,IAAI,EAAE,gBAAeF,KAAf;AAFkB,OAAZ,CAAd;AAID,KAVK;AAWNG,IAAAA,IAXM,gBAWDC,OAXC,EAWQ;AACZ,aAAOnB,OAAO,mBAAYmB,OAAZ,EAAd;AACD,KAbK;AAcNC,IAAAA,MAdM,kBAcCD,OAdD,EAcUE,OAdV,EAcmB;AACvB,aAAOrB,OAAO,mBAAYmB,OAAZ,GAAuB;AACnCH,QAAAA,MAAM,EAAE,KAD2B;AAEnCC,QAAAA,IAAI,EAAE,gBAAeI,OAAf;AAF6B,OAAvB,CAAd;AAID,KAnBK;AAoBN;AACAC,IAAAA,MArBM,kBAqBCH,OArBD,EAqBU;AACd,aAAOnB,OAAO,mBAAYmB,OAAZ,GAAuB;AACnCH,QAAAA,MAAM,EAAE;AAD2B,OAAvB,CAAd;AAGD;AAzBK;AADE,CAAZ;AA8BA,eAAeL,GAAf","sourcesContent":["const BASE_URL = 'http://localhost:3011/api';\r\n\r\n/* const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\r\nconst randomNumber = (min = 0, max = 1) =>\r\n  Math.floor(Math.random() * (max - min + 1)) + min;\r\nconst simulateNetworkLatency = (min = 30, max = 1500) =>\r\n  delay(randomNumber(min, max)); */\r\n\r\nasync function callApi(endpoint, options = {}) {\r\n  await simulateNetworkLatency();\r\n\r\n  options.headers = {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  };\r\n\r\n  const url = BASE_URL + endpoint;\r\n  const response = await fetch(url, options);\r\n  const data = await response.json();\r\n\r\n  return data;\r\n}\r\n\r\nconst api = {\r\n  badges: {\r\n    list() {\r\n      return callApi('/badges');\r\n    },\r\n    create(badge) {\r\n      // throw new Error('500: Server error');\r\n      return callApi(`/badges`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(badge),\r\n      });\r\n    },\r\n    read(badgeId) {\r\n      return callApi(`/badges/${badgeId}`);\r\n    },\r\n    update(badgeId, updates) {\r\n      return callApi(`/badges/${badgeId}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updates),\r\n      });\r\n    },\r\n    // Lo hubiera llamado `delete`, pero `delete` es un keyword en JavaScript asi que no es buena idea :P\r\n    remove(badgeId) {\r\n      return callApi(`/badges/${badgeId}`, {\r\n        method: 'DELETE',\r\n      });\r\n    },\r\n  },\r\n};\r\n\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}